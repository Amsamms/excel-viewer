{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Estabrk\\\\Cursor AI Projects\\\\Clients\\\\execl_viewer\\\\excel-viewer\\\\src\\\\components\\\\SimpleExcelViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleExcelViewer = ({\n  file\n}) => {\n  _s();\n  const [sheets, setSheets] = useState([]);\n  const [activeSheetIndex, setActiveSheetIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showFormulas, setShowFormulas] = useState(false);\n  const [debugMode, setDebugMode] = useState(false);\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n  const loadExcelFile = async file => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array',\n        cellStyles: true,\n        cellNF: true,\n        cellHTML: true\n      });\n      const sheetsData = workbook.SheetNames.map(sheetName => {\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Get the range to understand the dimensions\n        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');\n        const rows = range.e.r + 1;\n        const cols = range.e.c + 1;\n\n        // Create a matrix to store cell data with formatting\n        const cellMatrix = [];\n        for (let row = 0; row < rows; row++) {\n          cellMatrix[row] = [];\n          for (let col = 0; col < cols; col++) {\n            const cellAddress = XLSX.utils.encode_cell({\n              r: row,\n              c: col\n            });\n            const cell = worksheet[cellAddress];\n            if (cell) {\n              const backgroundColor = getCellBackgroundColor(cell);\n              const textColor = getCellTextColor(cell);\n              const isBold = isCellBold(cell);\n              cellMatrix[row][col] = {\n                value: cell.w || cell.v || '',\n                // formatted value or raw value\n                formula: cell.f || null,\n                // formula if exists\n                type: cell.t || 'n',\n                // cell type\n                style: cell.s || null,\n                // style information\n                backgroundColor: backgroundColor,\n                textColor: textColor,\n                isBold: isBold,\n                isItalic: isCellItalic(cell),\n                fontSize: getCellFontSize(cell),\n                fontFamily: getCellFontFamily(cell),\n                alignment: getCellAlignment(cell),\n                border: getCellBorder(cell),\n                originalCell: cell,\n                // store original cell for debugging\n                debugInfo: `BG: ${backgroundColor}, Text: ${textColor}, Bold: ${isBold}, Style: ${JSON.stringify(cell.s)}`\n              };\n\n              // Log first few cells for debugging\n              if (row < 3 && col < 3) {\n                console.log(`Cell [${row},${col}]:`, {\n                  value: cell.w || cell.v,\n                  style: cell.s,\n                  backgroundColor,\n                  textColor,\n                  isBold,\n                  rawCell: cell\n                });\n              }\n            } else {\n              cellMatrix[row][col] = {\n                value: '',\n                formula: null,\n                type: 'n',\n                style: null,\n                backgroundColor: null,\n                textColor: null,\n                isBold: false,\n                isItalic: false,\n                fontSize: null,\n                fontFamily: null,\n                alignment: null,\n                border: null,\n                originalCell: null\n              };\n            }\n          }\n        }\n        return {\n          name: sheetName,\n          data: cellMatrix,\n          rawData: XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            raw: false\n          })\n        };\n      });\n      setSheets(sheetsData);\n      setActiveSheetIndex(0);\n    } catch (err) {\n      setError('Error loading Excel file: ' + err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper functions to extract formatting\n  const getCellBackgroundColor = cell => {\n    if (cell.s && cell.s.fill && cell.s.fill.bgColor) {\n      const color = cell.s.fill.bgColor;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`; // Remove alpha channel\n      }\n      if (color.indexed) {\n        // Map common indexed colors\n        const indexedColors = {\n          64: '#000000',\n          // black\n          9: '#ffffff',\n          // white\n          10: '#ff0000',\n          // red\n          11: '#00ff00',\n          // green\n          12: '#0000ff',\n          // blue\n          13: '#ffff00',\n          // yellow\n          14: '#ff00ff',\n          // magenta\n          15: '#00ffff',\n          // cyan\n          43: '#92d050',\n          // light green\n          44: '#00b0f0',\n          // light blue\n          45: '#0070c0',\n          // blue\n          46: '#002060' // dark blue\n        };\n        return indexedColors[color.indexed] || null;\n      }\n    }\n    return null;\n  };\n  const getCellTextColor = cell => {\n    if (cell.s && cell.s.font && cell.s.font.color) {\n      const color = cell.s.font.color;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`;\n      }\n    }\n    return null;\n  };\n  const isCellBold = cell => {\n    return cell.s && cell.s.font && cell.s.font.bold;\n  };\n  const isCellItalic = cell => {\n    return cell.s && cell.s.font && cell.s.font.italic;\n  };\n  const getCellFontSize = cell => {\n    return cell.s && cell.s.font && cell.s.font.sz ? `${cell.s.font.sz}px` : null;\n  };\n  const getCellFontFamily = cell => {\n    return cell.s && cell.s.font && cell.s.font.name ? cell.s.font.name : null;\n  };\n  const getCellAlignment = cell => {\n    if (cell.s && cell.s.alignment) {\n      return {\n        horizontal: cell.s.alignment.horizontal || 'left',\n        vertical: cell.s.alignment.vertical || 'middle'\n      };\n    }\n    return null;\n  };\n  const getCellBorder = cell => {\n    if (cell.s && cell.s.border) {\n      return cell.s.border;\n    }\n    return null;\n  };\n  const handleCellChange = (rowIndex, colIndex, value) => {\n    const newSheets = [...sheets];\n    if (!newSheets[activeSheetIndex].data[rowIndex]) {\n      newSheets[activeSheetIndex].data[rowIndex] = [];\n    }\n\n    // Preserve the formatting while updating the value\n    const existingCell = newSheets[activeSheetIndex].data[rowIndex][colIndex];\n    if (existingCell && typeof existingCell === 'object') {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        ...existingCell,\n        value: value\n      };\n    } else {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        value: value,\n        formula: null,\n        type: 'n',\n        style: null,\n        backgroundColor: null,\n        textColor: null,\n        isBold: false,\n        isItalic: false,\n        fontSize: null,\n        fontFamily: null,\n        alignment: null,\n        border: null,\n        originalCell: null\n      };\n    }\n    setSheets(newSheets);\n  };\n  const getColumnLabel = index => {\n    let label = '';\n    let num = index;\n    while (num >= 0) {\n      label = String.fromCharCode(65 + num % 26) + label;\n      num = Math.floor(num / 26) - 1;\n    }\n    return label;\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl\",\n        children: \"Loading Excel file...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this);\n  }\n  if (sheets.length === 0) {\n    return null;\n  }\n  const activeSheet = sheets[activeSheetIndex];\n  const maxRows = Math.max(activeSheet.data.length, 20);\n  const maxCols = Math.max(...activeSheet.data.map(row => row.length), 10);\n  const getCellStyle = cell => {\n    const style = {};\n    if (cell && typeof cell === 'object') {\n      if (cell.backgroundColor) {\n        style.backgroundColor = cell.backgroundColor;\n      }\n      if (cell.textColor) {\n        style.color = cell.textColor;\n      }\n      if (cell.isBold) {\n        style.fontWeight = 'bold';\n      }\n      if (cell.isItalic) {\n        style.fontStyle = 'italic';\n      }\n      if (cell.fontSize) {\n        style.fontSize = cell.fontSize;\n      }\n      if (cell.fontFamily) {\n        style.fontFamily = cell.fontFamily;\n      }\n      if (cell.alignment) {\n        style.textAlign = cell.alignment.horizontal;\n        style.verticalAlign = cell.alignment.vertical;\n      }\n    }\n    return style;\n  };\n  const getCellDisplayValue = cell => {\n    if (!cell || typeof cell !== 'object') {\n      return String(cell || '');\n    }\n    if (showFormulas && cell.formula) {\n      return `=${cell.formula}`;\n    }\n    return String(cell.value || '');\n  };\n  const getCellTitle = cell => {\n    if (!cell || typeof cell !== 'object') {\n      return '';\n    }\n    let title = '';\n    if (cell.formula) {\n      title += `Formula: =${cell.formula}\\n`;\n    }\n    if (cell.value !== undefined) {\n      title += `Value: ${cell.value}\\n`;\n    }\n    if (cell.type) {\n      title += `Type: ${cell.type}`;\n    }\n    return title.trim();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between mb-4\",\n      children: [sheets.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex border-b border-gray-300\",\n        children: sheets.map((sheet, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setActiveSheetIndex(index),\n          className: `px-4 py-2 text-sm font-medium ${index === activeSheetIndex ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`,\n          children: sheet.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFormulas(!showFormulas),\n          className: `px-3 py-1 text-xs font-medium rounded ${showFormulas ? 'bg-blue-100 text-blue-800 border border-blue-300' : 'bg-gray-100 text-gray-700 border border-gray-300'}`,\n          children: showFormulas ? 'Hide Formulas' : 'Show Formulas'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDebugMode(!debugMode),\n          className: `px-3 py-1 text-xs font-medium rounded ${debugMode ? 'bg-red-100 text-red-800 border border-red-300' : 'bg-gray-100 text-gray-700 border border-gray-300'}`,\n          children: debugMode ? 'Hide Debug' : 'Show Debug'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-auto border border-gray-300 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"w-12 p-2 text-xs font-medium text-gray-500 border-r border-gray-300\",\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this), Array.from({\n              length: maxCols\n            }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 text-xs font-medium text-gray-500 border-r border-gray-300 min-w-20\",\n              children: getColumnLabel(colIndex)\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Array.from({\n            length: maxRows\n          }, (_, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"hover:bg-gray-50\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 text-xs text-gray-500 bg-gray-100 border-r border-gray-300 text-center\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 17\n            }, this), Array.from({\n              length: maxCols\n            }, (_, colIndex) => {\n              const cell = activeSheet.data[rowIndex] && activeSheet.data[rowIndex][colIndex];\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"p-0 border-r border-b border-gray-300\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: getCellDisplayValue(cell),\n                  onChange: e => handleCellChange(rowIndex, colIndex, e.target.value),\n                  title: debugMode ? (cell === null || cell === void 0 ? void 0 : cell.debugInfo) || getCellTitle(cell) : getCellTitle(cell),\n                  className: \"w-full h-8 px-2 text-sm border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-500 focus:ring-inset\",\n                  style: {\n                    minWidth: '80px',\n                    ...getCellStyle(cell)\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 23\n                }, this)\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 21\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleExcelViewer, \"ozdfFQswxryMbgal3XQScNloa0Q=\");\n_c = SimpleExcelViewer;\nexport default SimpleExcelViewer;\nvar _c;\n$RefreshReg$(_c, \"SimpleExcelViewer\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","SimpleExcelViewer","file","_s","sheets","setSheets","activeSheetIndex","setActiveSheetIndex","isLoading","setIsLoading","error","setError","showFormulas","setShowFormulas","debugMode","setDebugMode","loadExcelFile","arrayBuffer","workbook","read","type","cellStyles","cellNF","cellHTML","sheetsData","SheetNames","map","sheetName","worksheet","Sheets","range","utils","decode_range","rows","e","r","cols","c","cellMatrix","row","col","cellAddress","encode_cell","cell","backgroundColor","getCellBackgroundColor","textColor","getCellTextColor","isBold","isCellBold","value","w","v","formula","f","t","style","s","isItalic","isCellItalic","fontSize","getCellFontSize","fontFamily","getCellFontFamily","alignment","getCellAlignment","border","getCellBorder","originalCell","debugInfo","JSON","stringify","console","log","rawCell","name","data","rawData","sheet_to_json","header","defval","raw","err","message","fill","bgColor","color","rgb","slice","indexed","indexedColors","font","bold","italic","sz","horizontal","vertical","handleCellChange","rowIndex","colIndex","newSheets","existingCell","getColumnLabel","index","label","num","String","fromCharCode","Math","floor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","activeSheet","maxRows","max","maxCols","getCellStyle","fontWeight","fontStyle","textAlign","verticalAlign","getCellDisplayValue","getCellTitle","title","undefined","trim","sheet","onClick","Array","from","_","onChange","target","minWidth","_c","$RefreshReg$"],"sources":["C:/Users/Estabrk/Cursor AI Projects/Clients/execl_viewer/excel-viewer/src/components/SimpleExcelViewer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\n\ninterface SimpleExcelViewerProps {\n  file: File | null;\n}\n\nconst SimpleExcelViewer: React.FC<SimpleExcelViewerProps> = ({ file }) => {\n  const [sheets, setSheets] = useState<any[]>([]);\n  const [activeSheetIndex, setActiveSheetIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showFormulas, setShowFormulas] = useState(false);\n  const [debugMode, setDebugMode] = useState(false);\n\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n\n  const loadExcelFile = async (file: File) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, { \n        type: 'array',\n        cellStyles: true,\n        cellNF: true,\n        cellHTML: true\n      });\n      \n      const sheetsData = workbook.SheetNames.map((sheetName) => {\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // Get the range to understand the dimensions\n        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');\n        const rows = range.e.r + 1;\n        const cols = range.e.c + 1;\n        \n        // Create a matrix to store cell data with formatting\n        const cellMatrix: any[][] = [];\n        \n        for (let row = 0; row < rows; row++) {\n          cellMatrix[row] = [];\n          for (let col = 0; col < cols; col++) {\n            const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });\n            const cell = worksheet[cellAddress];\n            \n            if (cell) {\n              const backgroundColor = getCellBackgroundColor(cell);\n              const textColor = getCellTextColor(cell);\n              const isBold = isCellBold(cell);\n              \n              cellMatrix[row][col] = {\n                value: cell.w || cell.v || '', // formatted value or raw value\n                formula: cell.f || null, // formula if exists\n                type: cell.t || 'n', // cell type\n                style: cell.s || null, // style information\n                backgroundColor: backgroundColor,\n                textColor: textColor,\n                isBold: isBold,\n                isItalic: isCellItalic(cell),\n                fontSize: getCellFontSize(cell),\n                fontFamily: getCellFontFamily(cell),\n                alignment: getCellAlignment(cell),\n                border: getCellBorder(cell),\n                originalCell: cell, // store original cell for debugging\n                debugInfo: `BG: ${backgroundColor}, Text: ${textColor}, Bold: ${isBold}, Style: ${JSON.stringify(cell.s)}`\n              };\n              \n              // Log first few cells for debugging\n              if (row < 3 && col < 3) {\n                console.log(`Cell [${row},${col}]:`, {\n                  value: cell.w || cell.v,\n                  style: cell.s,\n                  backgroundColor,\n                  textColor,\n                  isBold,\n                  rawCell: cell\n                });\n              }\n            } else {\n              cellMatrix[row][col] = {\n                value: '',\n                formula: null,\n                type: 'n',\n                style: null,\n                backgroundColor: null,\n                textColor: null,\n                isBold: false,\n                isItalic: false,\n                fontSize: null,\n                fontFamily: null,\n                alignment: null,\n                border: null,\n                originalCell: null\n              };\n            }\n          }\n        }\n        \n        return {\n          name: sheetName,\n          data: cellMatrix,\n          rawData: XLSX.utils.sheet_to_json(worksheet, { \n            header: 1, \n            defval: '',\n            raw: false \n          }),\n        };\n      });\n\n      setSheets(sheetsData);\n      setActiveSheetIndex(0);\n    } catch (err) {\n      setError('Error loading Excel file: ' + (err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper functions to extract formatting\n  const getCellBackgroundColor = (cell: any) => {\n    if (cell.s && cell.s.fill && cell.s.fill.bgColor) {\n      const color = cell.s.fill.bgColor;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`; // Remove alpha channel\n      }\n      if (color.indexed) {\n        // Map common indexed colors\n        const indexedColors: { [key: number]: string } = {\n          64: '#000000', // black\n          9: '#ffffff',  // white\n          10: '#ff0000', // red\n          11: '#00ff00', // green\n          12: '#0000ff', // blue\n          13: '#ffff00', // yellow\n          14: '#ff00ff', // magenta\n          15: '#00ffff', // cyan\n          43: '#92d050', // light green\n          44: '#00b0f0', // light blue\n          45: '#0070c0', // blue\n          46: '#002060', // dark blue\n        };\n        return indexedColors[color.indexed] || null;\n      }\n    }\n    return null;\n  };\n\n  const getCellTextColor = (cell: any) => {\n    if (cell.s && cell.s.font && cell.s.font.color) {\n      const color = cell.s.font.color;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`;\n      }\n    }\n    return null;\n  };\n\n  const isCellBold = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.bold;\n  };\n\n  const isCellItalic = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.italic;\n  };\n\n  const getCellFontSize = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.sz ? `${cell.s.font.sz}px` : null;\n  };\n\n  const getCellFontFamily = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.name ? cell.s.font.name : null;\n  };\n\n  const getCellAlignment = (cell: any) => {\n    if (cell.s && cell.s.alignment) {\n      return {\n        horizontal: cell.s.alignment.horizontal || 'left',\n        vertical: cell.s.alignment.vertical || 'middle'\n      };\n    }\n    return null;\n  };\n\n  const getCellBorder = (cell: any) => {\n    if (cell.s && cell.s.border) {\n      return cell.s.border;\n    }\n    return null;\n  };\n\n  const handleCellChange = (rowIndex: number, colIndex: number, value: string) => {\n    const newSheets = [...sheets];\n    if (!newSheets[activeSheetIndex].data[rowIndex]) {\n      newSheets[activeSheetIndex].data[rowIndex] = [];\n    }\n    \n    // Preserve the formatting while updating the value\n    const existingCell = newSheets[activeSheetIndex].data[rowIndex][colIndex];\n    if (existingCell && typeof existingCell === 'object') {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        ...existingCell,\n        value: value\n      };\n    } else {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        value: value,\n        formula: null,\n        type: 'n',\n        style: null,\n        backgroundColor: null,\n        textColor: null,\n        isBold: false,\n        isItalic: false,\n        fontSize: null,\n        fontFamily: null,\n        alignment: null,\n        border: null,\n        originalCell: null\n      };\n    }\n    \n    setSheets(newSheets);\n  };\n\n  const getColumnLabel = (index: number): string => {\n    let label = '';\n    let num = index;\n    while (num >= 0) {\n      label = String.fromCharCode(65 + (num % 26)) + label;\n      num = Math.floor(num / 26) - 1;\n    }\n    return label;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-xl\">Loading Excel file...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-red-500 text-xl\">{error}</div>\n      </div>\n    );\n  }\n\n  if (sheets.length === 0) {\n    return null;\n  }\n\n  const activeSheet = sheets[activeSheetIndex];\n  const maxRows = Math.max(activeSheet.data.length, 20);\n  const maxCols = Math.max(\n    ...activeSheet.data.map((row: any[]) => row.length),\n    10\n  );\n\n  const getCellStyle = (cell: any) => {\n    const style: React.CSSProperties = {};\n    \n    if (cell && typeof cell === 'object') {\n      if (cell.backgroundColor) {\n        style.backgroundColor = cell.backgroundColor;\n      }\n      if (cell.textColor) {\n        style.color = cell.textColor;\n      }\n      if (cell.isBold) {\n        style.fontWeight = 'bold';\n      }\n      if (cell.isItalic) {\n        style.fontStyle = 'italic';\n      }\n      if (cell.fontSize) {\n        style.fontSize = cell.fontSize;\n      }\n      if (cell.fontFamily) {\n        style.fontFamily = cell.fontFamily;\n      }\n      if (cell.alignment) {\n        style.textAlign = cell.alignment.horizontal;\n        style.verticalAlign = cell.alignment.vertical;\n      }\n    }\n    \n    return style;\n  };\n\n  const getCellDisplayValue = (cell: any) => {\n    if (!cell || typeof cell !== 'object') {\n      return String(cell || '');\n    }\n    \n    if (showFormulas && cell.formula) {\n      return `=${cell.formula}`;\n    }\n    \n    return String(cell.value || '');\n  };\n\n  const getCellTitle = (cell: any) => {\n    if (!cell || typeof cell !== 'object') {\n      return '';\n    }\n    \n    let title = '';\n    if (cell.formula) {\n      title += `Formula: =${cell.formula}\\n`;\n    }\n    if (cell.value !== undefined) {\n      title += `Value: ${cell.value}\\n`;\n    }\n    if (cell.type) {\n      title += `Type: ${cell.type}`;\n    }\n    \n    return title.trim();\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Controls */}\n      <div className=\"flex items-center justify-between mb-4\">\n        {/* Sheet tabs */}\n        {sheets.length > 1 && (\n          <div className=\"flex border-b border-gray-300\">\n            {sheets.map((sheet, index) => (\n              <button\n                key={index}\n                onClick={() => setActiveSheetIndex(index)}\n                className={`px-4 py-2 text-sm font-medium ${\n                  index === activeSheetIndex\n                    ? 'text-blue-600 border-b-2 border-blue-600'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                {sheet.name}\n              </button>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"flex gap-2\">\n          {/* Formula toggle */}\n          <button\n            onClick={() => setShowFormulas(!showFormulas)}\n            className={`px-3 py-1 text-xs font-medium rounded ${\n              showFormulas\n                ? 'bg-blue-100 text-blue-800 border border-blue-300'\n                : 'bg-gray-100 text-gray-700 border border-gray-300'\n            }`}\n          >\n            {showFormulas ? 'Hide Formulas' : 'Show Formulas'}\n          </button>\n          \n          {/* Debug toggle */}\n          <button\n            onClick={() => setDebugMode(!debugMode)}\n            className={`px-3 py-1 text-xs font-medium rounded ${\n              debugMode\n                ? 'bg-red-100 text-red-800 border border-red-300'\n                : 'bg-gray-100 text-gray-700 border border-gray-300'\n            }`}\n          >\n            {debugMode ? 'Hide Debug' : 'Show Debug'}\n          </button>\n        </div>\n      </div>\n\n      {/* Spreadsheet grid */}\n      <div className=\"overflow-auto border border-gray-300 rounded-lg\">\n        <table className=\"min-w-full\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"w-12 p-2 text-xs font-medium text-gray-500 border-r border-gray-300\">\n                #\n              </th>\n              {Array.from({ length: maxCols }, (_, colIndex) => (\n                <th\n                  key={colIndex}\n                  className=\"p-2 text-xs font-medium text-gray-500 border-r border-gray-300 min-w-20\"\n                >\n                  {getColumnLabel(colIndex)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: maxRows }, (_, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50\">\n                <td className=\"p-2 text-xs text-gray-500 bg-gray-100 border-r border-gray-300 text-center\">\n                  {rowIndex + 1}\n                </td>\n                {Array.from({ length: maxCols }, (_, colIndex) => {\n                  const cell = activeSheet.data[rowIndex] && activeSheet.data[rowIndex][colIndex];\n                  return (\n                    <td\n                      key={colIndex}\n                      className=\"p-0 border-r border-b border-gray-300\"\n                    >\n                      <input\n                        type=\"text\"\n                        value={getCellDisplayValue(cell)}\n                        onChange={(e) =>\n                          handleCellChange(rowIndex, colIndex, e.target.value)\n                        }\n                        title={debugMode ? (cell?.debugInfo || getCellTitle(cell)) : getCellTitle(cell)}\n                        className=\"w-full h-8 px-2 text-sm border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-500 focus:ring-inset\"\n                        style={{\n                          minWidth: '80px',\n                          ...getCellStyle(cell)\n                        }}\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleExcelViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}