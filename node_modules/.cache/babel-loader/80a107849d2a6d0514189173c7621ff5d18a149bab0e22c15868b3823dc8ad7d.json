{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Estabrk\\\\Cursor AI Projects\\\\Clients\\\\execl_viewer\\\\excel-viewer\\\\src\\\\components\\\\ExcelViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelViewer = ({\n  file\n}) => {\n  _s();\n  const luckysheetRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n  const loadExcelFile = async file => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array'\n      });\n      const sheets = workbook.SheetNames.map(sheetName => {\n        const worksheet = workbook.Sheets[sheetName];\n        const data = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1,\n          defval: '',\n          raw: false\n        });\n        return {\n          name: sheetName,\n          data: convertToLuckysheetData(data),\n          config: {},\n          status: 1,\n          order: workbook.SheetNames.indexOf(sheetName),\n          hide: 0,\n          row: Math.max(data.length, 20),\n          column: Math.max(getMaxColumns(data), 10),\n          defaultRowHeight: 19,\n          defaultColWidth: 73\n        };\n      });\n      initializeLuckysheet(sheets);\n    } catch (err) {\n      setError('Error loading Excel file: ' + err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getMaxColumns = data => {\n    return Math.max(...data.map(row => row.length), 0);\n  };\n  const convertToLuckysheetData = data => {\n    const result = [];\n    data.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell !== null && cell !== undefined && cell !== '') {\n          result.push({\n            r: rowIndex,\n            c: colIndex,\n            v: {\n              v: cell,\n              ct: {\n                fa: 'General',\n                t: 'g'\n              },\n              m: String(cell),\n              bg: null,\n              bl: 0,\n              it: 0,\n              ff: 'Arial',\n              fs: 10,\n              fc: '#000000',\n              ht: 1,\n              vt: 1\n            }\n          });\n        }\n      });\n    });\n    return result;\n  };\n  const initializeLuckysheet = sheets => {\n    if (luckysheetRef.current && window.luckysheet) {\n      luckysheetRef.current.innerHTML = '';\n      window.luckysheet.create({\n        container: luckysheetRef.current,\n        showtoolbar: true,\n        showinfobar: true,\n        showsheetbar: true,\n        showstatisticBar: true,\n        allowCopy: false,\n        allowEdit: true,\n        allowUpdate: true,\n        showConfigWindowResize: true,\n        enableAddRow: true,\n        enableAddCol: true,\n        data: sheets,\n        title: (file === null || file === void 0 ? void 0 : file.name) || 'Excel Viewer',\n        lang: 'en'\n      });\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl\",\n        children: \"Loading Excel file...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: luckysheetRef,\n      style: {\n        width: '100%',\n        height: '600px'\n      },\n      className: \"border border-gray-300 rounded-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelViewer, \"e2YVqSi9GuqerFnORvjyNjJ481Q=\");\n_c = ExcelViewer;\nexport default ExcelViewer;\nvar _c;\n$RefreshReg$(_c, \"ExcelViewer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","XLSX","jsxDEV","_jsxDEV","ExcelViewer","file","_s","luckysheetRef","isLoading","setIsLoading","error","setError","loadExcelFile","arrayBuffer","workbook","read","type","sheets","SheetNames","map","sheetName","worksheet","Sheets","data","utils","sheet_to_json","header","defval","raw","name","convertToLuckysheetData","config","status","order","indexOf","hide","row","Math","max","length","column","getMaxColumns","defaultRowHeight","defaultColWidth","initializeLuckysheet","err","message","result","forEach","rowIndex","cell","colIndex","undefined","push","r","c","v","ct","fa","t","m","String","bg","bl","it","ff","fs","fc","ht","vt","current","window","luckysheet","innerHTML","create","container","showtoolbar","showinfobar","showsheetbar","showstatisticBar","allowCopy","allowEdit","allowUpdate","showConfigWindowResize","enableAddRow","enableAddCol","title","lang","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Estabrk/Cursor AI Projects/Clients/execl_viewer/excel-viewer/src/components/ExcelViewer.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as XLSX from 'xlsx';\n\ndeclare global {\n  interface Window {\n    luckysheet: any;\n  }\n}\n\ninterface ExcelViewerProps {\n  file: File | null;\n}\n\nconst ExcelViewer: React.FC<ExcelViewerProps> = ({ file }) => {\n  const luckysheetRef = useRef<HTMLDivElement>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n\n  const loadExcelFile = async (file: File) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n      \n      const sheets = workbook.SheetNames.map((sheetName) => {\n        const worksheet = workbook.Sheets[sheetName];\n        const data = XLSX.utils.sheet_to_json(worksheet, { \n          header: 1, \n          defval: '',\n          raw: false \n        });\n        \n        return {\n          name: sheetName,\n          data: convertToLuckysheetData(data as any[][]),\n          config: {},\n          status: 1,\n          order: workbook.SheetNames.indexOf(sheetName),\n          hide: 0,\n          row: Math.max(data.length, 20),\n          column: Math.max(getMaxColumns(data as any[][]), 10),\n          defaultRowHeight: 19,\n          defaultColWidth: 73,\n        };\n      });\n\n      initializeLuckysheet(sheets);\n    } catch (err) {\n      setError('Error loading Excel file: ' + (err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getMaxColumns = (data: any[][]): number => {\n    return Math.max(...data.map(row => row.length), 0);\n  };\n\n  const convertToLuckysheetData = (data: any[][]): any[] => {\n    const result: any[] = [];\n    \n    data.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell !== null && cell !== undefined && cell !== '') {\n          result.push({\n            r: rowIndex,\n            c: colIndex,\n            v: {\n              v: cell,\n              ct: { fa: 'General', t: 'g' },\n              m: String(cell),\n              bg: null,\n              bl: 0,\n              it: 0,\n              ff: 'Arial',\n              fs: 10,\n              fc: '#000000',\n              ht: 1,\n              vt: 1\n            }\n          });\n        }\n      });\n    });\n    \n    return result;\n  };\n\n  const initializeLuckysheet = (sheets: any[]) => {\n    if (luckysheetRef.current && window.luckysheet) {\n      luckysheetRef.current.innerHTML = '';\n      \n      window.luckysheet.create({\n        container: luckysheetRef.current,\n        showtoolbar: true,\n        showinfobar: true,\n        showsheetbar: true,\n        showstatisticBar: true,\n        allowCopy: false,\n        allowEdit: true,\n        allowUpdate: true,\n        showConfigWindowResize: true,\n        enableAddRow: true,\n        enableAddCol: true,\n        data: sheets,\n        title: file?.name || 'Excel Viewer',\n        lang: 'en',\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-xl\">Loading Excel file...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-red-500 text-xl\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full\">\n      <div\n        ref={luckysheetRef}\n        style={{ width: '100%', height: '600px' }}\n        className=\"border border-gray-300 rounded-lg\"\n      />\n    </div>\n  );\n};\n\nexport default ExcelViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}