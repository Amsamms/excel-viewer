{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Estabrk\\\\Cursor AI Projects\\\\Clients\\\\execl_viewer\\\\excel-viewer\\\\src\\\\components\\\\SimpleExcelViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleExcelViewer = ({\n  file\n}) => {\n  _s();\n  const [sheets, setSheets] = useState([]);\n  const [activeSheetIndex, setActiveSheetIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n  const loadExcelFile = async file => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array',\n        cellStyles: true,\n        cellNF: true,\n        cellHTML: true\n      });\n      const sheetsData = workbook.SheetNames.map(sheetName => {\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Get the range to understand the dimensions\n        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');\n        const rows = range.e.r + 1;\n        const cols = range.e.c + 1;\n\n        // Create a matrix to store cell data with formatting\n        const cellMatrix = [];\n        for (let row = 0; row < rows; row++) {\n          cellMatrix[row] = [];\n          for (let col = 0; col < cols; col++) {\n            const cellAddress = XLSX.utils.encode_cell({\n              r: row,\n              c: col\n            });\n            const cell = worksheet[cellAddress];\n            if (cell) {\n              cellMatrix[row][col] = {\n                value: cell.w || cell.v || '',\n                // formatted value or raw value\n                formula: cell.f || null,\n                // formula if exists\n                type: cell.t || 'n',\n                // cell type\n                style: cell.s || null,\n                // style information\n                backgroundColor: getCellBackgroundColor(cell),\n                textColor: getCellTextColor(cell),\n                isBold: isCellBold(cell),\n                isItalic: isCellItalic(cell),\n                fontSize: getCellFontSize(cell),\n                fontFamily: getCellFontFamily(cell),\n                alignment: getCellAlignment(cell),\n                border: getCellBorder(cell),\n                originalCell: cell // store original cell for debugging\n              };\n            } else {\n              cellMatrix[row][col] = {\n                value: '',\n                formula: null,\n                type: 'n',\n                style: null,\n                backgroundColor: null,\n                textColor: null,\n                isBold: false,\n                isItalic: false,\n                fontSize: null,\n                fontFamily: null,\n                alignment: null,\n                border: null,\n                originalCell: null\n              };\n            }\n          }\n        }\n        return {\n          name: sheetName,\n          data: cellMatrix,\n          rawData: XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            raw: false\n          })\n        };\n      });\n      setSheets(sheetsData);\n      setActiveSheetIndex(0);\n    } catch (err) {\n      setError('Error loading Excel file: ' + err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper functions to extract formatting\n  const getCellBackgroundColor = cell => {\n    if (cell.s && cell.s.fill && cell.s.fill.bgColor) {\n      const color = cell.s.fill.bgColor;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`; // Remove alpha channel\n      }\n      if (color.indexed) {\n        // Map common indexed colors\n        const indexedColors = {\n          64: '#000000',\n          // black\n          9: '#ffffff',\n          // white\n          10: '#ff0000',\n          // red\n          11: '#00ff00',\n          // green\n          12: '#0000ff',\n          // blue\n          13: '#ffff00',\n          // yellow\n          14: '#ff00ff',\n          // magenta\n          15: '#00ffff',\n          // cyan\n          43: '#92d050',\n          // light green\n          44: '#00b0f0',\n          // light blue\n          45: '#0070c0',\n          // blue\n          46: '#002060' // dark blue\n        };\n        return indexedColors[color.indexed] || null;\n      }\n    }\n    return null;\n  };\n  const getCellTextColor = cell => {\n    if (cell.s && cell.s.font && cell.s.font.color) {\n      const color = cell.s.font.color;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`;\n      }\n    }\n    return null;\n  };\n  const isCellBold = cell => {\n    return cell.s && cell.s.font && cell.s.font.bold;\n  };\n  const isCellItalic = cell => {\n    return cell.s && cell.s.font && cell.s.font.italic;\n  };\n  const getCellFontSize = cell => {\n    return cell.s && cell.s.font && cell.s.font.sz ? `${cell.s.font.sz}px` : null;\n  };\n  const getCellFontFamily = cell => {\n    return cell.s && cell.s.font && cell.s.font.name ? cell.s.font.name : null;\n  };\n  const getCellAlignment = cell => {\n    if (cell.s && cell.s.alignment) {\n      return {\n        horizontal: cell.s.alignment.horizontal || 'left',\n        vertical: cell.s.alignment.vertical || 'middle'\n      };\n    }\n    return null;\n  };\n  const getCellBorder = cell => {\n    if (cell.s && cell.s.border) {\n      return cell.s.border;\n    }\n    return null;\n  };\n  const handleCellChange = (rowIndex, colIndex, value) => {\n    const newSheets = [...sheets];\n    if (!newSheets[activeSheetIndex].data[rowIndex]) {\n      newSheets[activeSheetIndex].data[rowIndex] = [];\n    }\n\n    // Preserve the formatting while updating the value\n    const existingCell = newSheets[activeSheetIndex].data[rowIndex][colIndex];\n    if (existingCell && typeof existingCell === 'object') {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        ...existingCell,\n        value: value\n      };\n    } else {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        value: value,\n        formula: null,\n        type: 'n',\n        style: null,\n        backgroundColor: null,\n        textColor: null,\n        isBold: false,\n        isItalic: false,\n        fontSize: null,\n        fontFamily: null,\n        alignment: null,\n        border: null,\n        originalCell: null\n      };\n    }\n    setSheets(newSheets);\n  };\n  const getColumnLabel = index => {\n    let label = '';\n    let num = index;\n    while (num >= 0) {\n      label = String.fromCharCode(65 + num % 26) + label;\n      num = Math.floor(num / 26) - 1;\n    }\n    return label;\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl\",\n        children: \"Loading Excel file...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-96\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n  if (sheets.length === 0) {\n    return null;\n  }\n  const activeSheet = sheets[activeSheetIndex];\n  const maxRows = Math.max(activeSheet.data.length, 20);\n  const maxCols = Math.max(...activeSheet.data.map(row => row.length), 10);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full\",\n    children: [sheets.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex border-b border-gray-300 mb-4\",\n      children: sheets.map((sheet, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveSheetIndex(index),\n        className: `px-4 py-2 text-sm font-medium ${index === activeSheetIndex ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`,\n        children: sheet.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-auto border border-gray-300 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"min-w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"w-12 p-2 text-xs font-medium text-gray-500 border-r border-gray-300\",\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), Array.from({\n              length: maxCols\n            }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"p-2 text-xs font-medium text-gray-500 border-r border-gray-300 min-w-20\",\n              children: getColumnLabel(colIndex)\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Array.from({\n            length: maxRows\n          }, (_, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"hover:bg-gray-50\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-2 text-xs text-gray-500 bg-gray-100 border-r border-gray-300 text-center\",\n              children: rowIndex + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this), Array.from({\n              length: maxCols\n            }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"p-0 border-r border-b border-gray-300\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: activeSheet.data[rowIndex] && activeSheet.data[rowIndex][colIndex] ? String(activeSheet.data[rowIndex][colIndex]) : '',\n                onChange: e => handleCellChange(rowIndex, colIndex, e.target.value),\n                className: \"w-full h-8 px-2 text-sm border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-500 focus:ring-inset\",\n                style: {\n                  minWidth: '80px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 21\n              }, this)\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this))]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleExcelViewer, \"y0hfvfXAsF+0k4mRAxFL5svMGyo=\");\n_c = SimpleExcelViewer;\nexport default SimpleExcelViewer;\nvar _c;\n$RefreshReg$(_c, \"SimpleExcelViewer\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","SimpleExcelViewer","file","_s","sheets","setSheets","activeSheetIndex","setActiveSheetIndex","isLoading","setIsLoading","error","setError","loadExcelFile","arrayBuffer","workbook","read","type","cellStyles","cellNF","cellHTML","sheetsData","SheetNames","map","sheetName","worksheet","Sheets","range","utils","decode_range","rows","e","r","cols","c","cellMatrix","row","col","cellAddress","encode_cell","cell","value","w","v","formula","f","t","style","s","backgroundColor","getCellBackgroundColor","textColor","getCellTextColor","isBold","isCellBold","isItalic","isCellItalic","fontSize","getCellFontSize","fontFamily","getCellFontFamily","alignment","getCellAlignment","border","getCellBorder","originalCell","name","data","rawData","sheet_to_json","header","defval","raw","err","message","fill","bgColor","color","rgb","slice","indexed","indexedColors","font","bold","italic","sz","horizontal","vertical","handleCellChange","rowIndex","colIndex","newSheets","existingCell","getColumnLabel","index","label","num","String","fromCharCode","Math","floor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","activeSheet","maxRows","max","maxCols","sheet","onClick","Array","from","_","onChange","target","minWidth","_c","$RefreshReg$"],"sources":["C:/Users/Estabrk/Cursor AI Projects/Clients/execl_viewer/excel-viewer/src/components/SimpleExcelViewer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\n\ninterface SimpleExcelViewerProps {\n  file: File | null;\n}\n\nconst SimpleExcelViewer: React.FC<SimpleExcelViewerProps> = ({ file }) => {\n  const [sheets, setSheets] = useState<any[]>([]);\n  const [activeSheetIndex, setActiveSheetIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (file) {\n      loadExcelFile(file);\n    }\n  }, [file]);\n\n  const loadExcelFile = async (file: File) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, { \n        type: 'array',\n        cellStyles: true,\n        cellNF: true,\n        cellHTML: true\n      });\n      \n      const sheetsData = workbook.SheetNames.map((sheetName) => {\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // Get the range to understand the dimensions\n        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');\n        const rows = range.e.r + 1;\n        const cols = range.e.c + 1;\n        \n        // Create a matrix to store cell data with formatting\n        const cellMatrix: any[][] = [];\n        \n        for (let row = 0; row < rows; row++) {\n          cellMatrix[row] = [];\n          for (let col = 0; col < cols; col++) {\n            const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });\n            const cell = worksheet[cellAddress];\n            \n            if (cell) {\n              cellMatrix[row][col] = {\n                value: cell.w || cell.v || '', // formatted value or raw value\n                formula: cell.f || null, // formula if exists\n                type: cell.t || 'n', // cell type\n                style: cell.s || null, // style information\n                backgroundColor: getCellBackgroundColor(cell),\n                textColor: getCellTextColor(cell),\n                isBold: isCellBold(cell),\n                isItalic: isCellItalic(cell),\n                fontSize: getCellFontSize(cell),\n                fontFamily: getCellFontFamily(cell),\n                alignment: getCellAlignment(cell),\n                border: getCellBorder(cell),\n                originalCell: cell // store original cell for debugging\n              };\n            } else {\n              cellMatrix[row][col] = {\n                value: '',\n                formula: null,\n                type: 'n',\n                style: null,\n                backgroundColor: null,\n                textColor: null,\n                isBold: false,\n                isItalic: false,\n                fontSize: null,\n                fontFamily: null,\n                alignment: null,\n                border: null,\n                originalCell: null\n              };\n            }\n          }\n        }\n        \n        return {\n          name: sheetName,\n          data: cellMatrix,\n          rawData: XLSX.utils.sheet_to_json(worksheet, { \n            header: 1, \n            defval: '',\n            raw: false \n          }),\n        };\n      });\n\n      setSheets(sheetsData);\n      setActiveSheetIndex(0);\n    } catch (err) {\n      setError('Error loading Excel file: ' + (err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper functions to extract formatting\n  const getCellBackgroundColor = (cell: any) => {\n    if (cell.s && cell.s.fill && cell.s.fill.bgColor) {\n      const color = cell.s.fill.bgColor;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`; // Remove alpha channel\n      }\n      if (color.indexed) {\n        // Map common indexed colors\n        const indexedColors: { [key: number]: string } = {\n          64: '#000000', // black\n          9: '#ffffff',  // white\n          10: '#ff0000', // red\n          11: '#00ff00', // green\n          12: '#0000ff', // blue\n          13: '#ffff00', // yellow\n          14: '#ff00ff', // magenta\n          15: '#00ffff', // cyan\n          43: '#92d050', // light green\n          44: '#00b0f0', // light blue\n          45: '#0070c0', // blue\n          46: '#002060', // dark blue\n        };\n        return indexedColors[color.indexed] || null;\n      }\n    }\n    return null;\n  };\n\n  const getCellTextColor = (cell: any) => {\n    if (cell.s && cell.s.font && cell.s.font.color) {\n      const color = cell.s.font.color;\n      if (color.rgb) {\n        return `#${color.rgb.slice(2)}`;\n      }\n    }\n    return null;\n  };\n\n  const isCellBold = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.bold;\n  };\n\n  const isCellItalic = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.italic;\n  };\n\n  const getCellFontSize = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.sz ? `${cell.s.font.sz}px` : null;\n  };\n\n  const getCellFontFamily = (cell: any) => {\n    return cell.s && cell.s.font && cell.s.font.name ? cell.s.font.name : null;\n  };\n\n  const getCellAlignment = (cell: any) => {\n    if (cell.s && cell.s.alignment) {\n      return {\n        horizontal: cell.s.alignment.horizontal || 'left',\n        vertical: cell.s.alignment.vertical || 'middle'\n      };\n    }\n    return null;\n  };\n\n  const getCellBorder = (cell: any) => {\n    if (cell.s && cell.s.border) {\n      return cell.s.border;\n    }\n    return null;\n  };\n\n  const handleCellChange = (rowIndex: number, colIndex: number, value: string) => {\n    const newSheets = [...sheets];\n    if (!newSheets[activeSheetIndex].data[rowIndex]) {\n      newSheets[activeSheetIndex].data[rowIndex] = [];\n    }\n    \n    // Preserve the formatting while updating the value\n    const existingCell = newSheets[activeSheetIndex].data[rowIndex][colIndex];\n    if (existingCell && typeof existingCell === 'object') {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        ...existingCell,\n        value: value\n      };\n    } else {\n      newSheets[activeSheetIndex].data[rowIndex][colIndex] = {\n        value: value,\n        formula: null,\n        type: 'n',\n        style: null,\n        backgroundColor: null,\n        textColor: null,\n        isBold: false,\n        isItalic: false,\n        fontSize: null,\n        fontFamily: null,\n        alignment: null,\n        border: null,\n        originalCell: null\n      };\n    }\n    \n    setSheets(newSheets);\n  };\n\n  const getColumnLabel = (index: number): string => {\n    let label = '';\n    let num = index;\n    while (num >= 0) {\n      label = String.fromCharCode(65 + (num % 26)) + label;\n      num = Math.floor(num / 26) - 1;\n    }\n    return label;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-xl\">Loading Excel file...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-red-500 text-xl\">{error}</div>\n      </div>\n    );\n  }\n\n  if (sheets.length === 0) {\n    return null;\n  }\n\n  const activeSheet = sheets[activeSheetIndex];\n  const maxRows = Math.max(activeSheet.data.length, 20);\n  const maxCols = Math.max(\n    ...activeSheet.data.map((row: any[]) => row.length),\n    10\n  );\n\n  return (\n    <div className=\"w-full\">\n      {/* Sheet tabs */}\n      {sheets.length > 1 && (\n        <div className=\"flex border-b border-gray-300 mb-4\">\n          {sheets.map((sheet, index) => (\n            <button\n              key={index}\n              onClick={() => setActiveSheetIndex(index)}\n              className={`px-4 py-2 text-sm font-medium ${\n                index === activeSheetIndex\n                  ? 'text-blue-600 border-b-2 border-blue-600'\n                  : 'text-gray-500 hover:text-gray-700'\n              }`}\n            >\n              {sheet.name}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Spreadsheet grid */}\n      <div className=\"overflow-auto border border-gray-300 rounded-lg\">\n        <table className=\"min-w-full\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"w-12 p-2 text-xs font-medium text-gray-500 border-r border-gray-300\">\n                #\n              </th>\n              {Array.from({ length: maxCols }, (_, colIndex) => (\n                <th\n                  key={colIndex}\n                  className=\"p-2 text-xs font-medium text-gray-500 border-r border-gray-300 min-w-20\"\n                >\n                  {getColumnLabel(colIndex)}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: maxRows }, (_, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50\">\n                <td className=\"p-2 text-xs text-gray-500 bg-gray-100 border-r border-gray-300 text-center\">\n                  {rowIndex + 1}\n                </td>\n                {Array.from({ length: maxCols }, (_, colIndex) => (\n                  <td\n                    key={colIndex}\n                    className=\"p-0 border-r border-b border-gray-300\"\n                  >\n                    <input\n                      type=\"text\"\n                      value={\n                        activeSheet.data[rowIndex] && activeSheet.data[rowIndex][colIndex]\n                          ? String(activeSheet.data[rowIndex][colIndex])\n                          : ''\n                      }\n                      onChange={(e) =>\n                        handleCellChange(rowIndex, colIndex, e.target.value)\n                      }\n                      className=\"w-full h-8 px-2 text-sm border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-500 focus:ring-inset\"\n                      style={{ minWidth: '80px' }}\n                    />\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleExcelViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}